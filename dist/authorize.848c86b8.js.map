{"mappings":"gRACA,IAAIA,E,kdAUJ,IAAAC,EAAAC,EAAA,S,aAGAC,GAAe,EAAAF,EAAAG,iBAAgB,CAC3BC,KAAM,UACNC,WAAY,C,cAACC,EAAAC,SACbC,QAAS,CACLC,YACI,IAAIC,EAAIC,cAAcC,SAElBC,EAASH,EAAEI,IAAI,UACnBC,QAAQC,IAAI,SAAUH,GACtBE,QAAQC,IAAI,UAAWL,eACvB,IAAIM,EAAgB,mGAAmGJ,yCAA8CK,OAAOC,SAASC,6BAOrLV,EAAED,UAAUQ,EAAe,CAACI,OAAQ,IAAKC,MAAO,IAAKC,WAL/B,SAAUC,GAE5B,MAAO,iBAAiBC,KAAKD,EACjC,IAGKE,MAAK,SAAUF,GAEZ,OAAOd,EAAEiB,IAAI,SAAU,UAAW,QAASH,EAC/C,IACCE,MAAK,WAGF,OAAOhB,EAAEkB,YACb,GACR,GAEJC,UAsDA,G,oGA9Fa,MAAAC,EAAA,CAAAC,MAAM,uCAIfC,GAAA,EAAAhC,EAAAiC,oBAAgB,UAAZ,WAAJ,G,yJANJ,SAAAjC,EAAAkC,cAAA,EAAAlC,EAAAmC,aAOiBC,EAPjB,MACI7B,SAAA,EAAAP,EAAAqC,UAAA,QAAArC,EAAAsC,aAIcC,EAJd,CAAaC,MAAM,yBAAyBC,SAAS,+B,CACjDlC,SAAA,EAAAP,EAAAqC,UAAA,QAAArC,EAAAiC,oBAEM,MAFNH,EAAA,EACI,EAAA9B,EAAAsC,aAAmDI,EAAnD,CAAcC,QAAOC,EAAAnC,UAAWoC,MAAM,a,+BAG9Cb,K,8FAJRc,EAAeC,IAAA,C,IAAbhD,EAASE,EAAA,SACLF,EAAOiD,aAAYjD,EAASA,EAAOQ,SACvCR,EAAOkD,OAAShD,EAAA,SAAAgD,OAEhBhD,EAAA,SAAAM,QAAqCR,GACrCA,EAAOmD,UAAY,gBACnBnD,EAAOoD,OAAS,W,IAIlBC,EAAerD,GCVf,E,WAAAQ,SAAU6C","sources":["src/pages/authorize/Page.vue","src/pages/authorize/main.js"],"sourcesContent":["<template>\r\n    <default-layout>\r\n        <page-header title=\"Authorization Power-up\" subtitle=\"Click on Authorize to start\">\r\n            <div class=\"flex flex-wrap justify-center gap-6\">\r\n                <btn-primary @click=\"authorize\" label=\"Authorize\"/>\r\n            </div>\r\n        </page-header>\r\n        <h1>Startup</h1>\r\n    </default-layout>\r\n</template>\r\n<script>\r\nimport {defineComponent} from 'vue'\r\nimport DefaultLayout from \"../../layout/DefaultLayout.vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"Startup\",\r\n    components: {DefaultLayout},\r\n    methods: {\r\n        authorize() {\r\n            var t = TrelloPowerUp.iframe();\r\n\r\n            var apiKey = t.arg('apiKey'); // Passed in as an argument to our iframe\r\n            console.log('apiKey', apiKey)\r\n            console.log('Promise', TrelloPowerUp)\r\n            var trelloAuthUrl = `https://trello.com/1/authorize?expiration=1hour&name=Example%20Trello%20Power-Up&scope=read&key=${apiKey}&callback_method=fragment&return_url=${window.location.origin}%2Fauth-success.html`;\r\n\r\n            var tokenLooksValid = function (token) {\r\n                // If this returns false, the Promise won't resolve.\r\n                return /^[0-9a-f]{64}$/.test(token);\r\n            }\r\n\r\n            t.authorize(trelloAuthUrl, {height: 680, width: 580, validToken: tokenLooksValid})\r\n                .then(function (token) {\r\n                    // store the token in Trello private Power-Up storage\r\n                    return t.set('member', 'private', 'token', token)\r\n                })\r\n                .then(function () {\r\n                    // now that we have the token we needed lets go on to letting\r\n                    // the user do whatever they need to do.\r\n                    return t.closePopup();\r\n                });\r\n        }\r\n    },\r\n    mounted() {\r\n        /* global TrelloPowerUp */\r\n\r\n// we can access Bluebird Promises as followsvar Promise = TrelloPowerUp.Promise;\r\n\r\n\r\n        /*\r\n        Trello Data Access\r\n        The following methods show all allowed fields, you only need to include those you want.\r\n        They all return promises that resolve to an object with the requested fields.\r\n        Get information about the current board\r\n        t.board('id', 'name', 'url', 'shortLink', 'members')\r\n        Get information about the current list (only available when a specific list is in context)\r\n        So for example available inside 'attachment-sections' or 'card-badges' but not 'show-settings' or 'board-buttons'\r\n        t.list('id', 'name', 'cards')\r\n        Get information about all open lists on the current board\r\n        t.lists('id', 'name', 'cards')\r\n        Get information about the current card (only available when a specific card is in context)\r\n        So for example available inside 'attachment-sections' or 'card-badges' but not 'show-settings' or 'board-buttons'\r\n        t.card('id', 'name', 'desc', 'due', 'closed', 'cover', 'attachments', 'members', 'labels', 'url', 'shortLink', 'idList')\r\n        Get information about all open cards on the current board\r\n        t.cards('id', 'name', 'desc', 'due', 'closed', 'cover', 'attachments', 'members', 'labels', 'url', 'shortLink', 'idList')\r\n        Get information about the current active Trello member\r\n        t.member('id', 'fullName', 'username')\r\n        For access to the rest of Trello's data, you'll need to use the RESTful API. This will require you to ask the\r\n        user to authorize your Power-Up to access Trello on their behalf. We've included an example of how to\r\n        do this in the `üîë Authorization Capabilities üóù` section at the bottom.\r\n        */\r\n\r\n        /*\r\n        Storing/Retrieving Your Own Data\r\n        Your Power-Up is afforded 4096 chars of space per scope/visibility\r\n        The following methods return Promises.\r\n        Storing data follows the format: t.set('scope', 'visibility', 'key', 'value')\r\n        With the scopes, you can only store data at the 'card' scope when a card is in scope\r\n        So for example in the context of 'card-badges' or 'attachment-sections', but not 'board-badges' or 'show-settings'\r\n        Also keep in mind storing at the 'organization' scope will only work if the active user is a member of the team\r\n        Information that is private to the current user, such as tokens should be stored using 'private' at the 'member' scope\r\n        t.set('organization', 'private', 'key', 'value');\r\n        t.set('board', 'private', 'key', 'value');\r\n        t.set('card', 'private', 'key', 'value');\r\n        t.set('member', 'private', 'key', 'value');\r\n        Information that should be available to all users of the Power-Up should be stored as 'shared'\r\n        t.set('organization', 'shared', 'key', 'value');\r\n        t.set('board', 'shared', 'key', 'value');\r\n        t.set('card', 'shared', 'key', 'value');\r\n        t.set('member', 'shared', 'key', 'value');\r\n        If you want to set multiple keys at once you can do that like so\r\n        t.set('board', 'shared', { key: value, extra: extraValue });\r\n        Reading back your data is as simple as\r\n        t.get('organization', 'shared', 'key');\r\n        Or want all in scope data at once?\r\n        t.getAll();\r\n        */\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n","import Page from './Page.vue'\r\nimport bootstrap from '../../boot/app.js'\r\n\r\nbootstrap(Page)\r\n"],"names":["$d20b562aea6816d4$var$script","$jhxxN","parcelRequire","$e33450ffa04e9460$export$2e2bcd8739ae039","defineComponent","name","components","$dYEPY","default","methods","authorize","t","TrelloPowerUp","iframe","apiKey","arg","console","log","trelloAuthUrl","window","location","origin","height","width","validToken","token","test","then","set","closePopup","mounted","$87c231eb122199d4$var$_hoisted_1","class","$87c231eb122199d4$var$_hoisted_2","createElementVNode","openBlock","createBlock","_component_default_layout","withCtx","createVNode","_component_page_header","title","subtitle","_component_btn_primary","onClick","_ctx","label","$016f4d3b5d67698d$export$2e2bcd8739ae039","script","__esModule","render","__scopeId","__file","$d20b562aea6816d4$export$2e2bcd8739ae039"],"version":3,"file":"authorize.848c86b8.js.map"}